#!/bin/bash

VERBOSITY=0
TEMP_D=""

ARCHES=( amd64 i386 s390x powerpc ppc64el armhf arm64 )
RELEASES=( $(ubuntu-distro-info --all) )
error() { echo "$@" 1>&2; }
fail() { [ $# -eq 0 ] || error "$@"; exit 1; }

Usage() {
	cat <<EOF
Usage: ${0##*/} [ options ] where [what]

   show information about latest images

   options:
      <<OPTIONS HERE>>
EOF
}

bad_Usage() { Usage 1>&2; [ $# -eq 0 ] || error "$@"; return 1; }
cleanup() {
	[ -z "${TEMP_D}" -o ! -d "${TEMP_D}" ] || rm -Rf "${TEMP_D}"
}

debug() {
	local level=${1}; shift;
	[ "${level}" -gt "${VERBOSITY}" ] && return
	error "${@}"
}

inargs() {
	local i="" n="$1"
	shift
	for i in "$@"; do
		[ "$n" = "$i" ] && return
	done
	return 1
}

main() {
	local short_opts="ho:v"
	local long_opts="help,output:,verbose"
	local getopt_out=""
	getopt_out=$(getopt --name "${0##*/}" \
		--options "${short_opts}" --long "${long_opts}" -- "$@") &&
		eval set -- "${getopt_out}" ||
		{ bad_Usage; return; }

	local cur="" next=""
	local output=""

	while [ $# -ne 0 ]; do
		cur="$1"; next="$2";
		case "$cur" in
			-h|--help) Usage ; exit 0;;
			-o|--output) output=$next; shift;;
			-v|--verbose) VERBOSITY=$((${VERBOSITY}+1));;
			--) shift; break;;
		esac
		shift;
	done

	## check arguments here
	## how many args do you expect?
	[ $# -gt 0 ] || { bad_Usage "expect 1 or more args. got $*"; return; }
    where="$1"
    shift
    
	local maas_fmt="%(release)s %(arch)s/%(subarch)s %(version_name)s %(item_name)s"
	local img_fmt="%(release)s %(arch)s %(version_name)s %(item_name)s"
	local maas_def_filters="" img_def_filters="" def_filters=""
	def_filters=( "arch=amd64" )
	mtype=""

	local uwhere=""
	case "$where" in
		maas|maas-daily)
			mtype="maas"
			uwhere="maas-eph-daily";;
		maas-release)
			mtype="maas"
			uwhere="maas-eph-rel";;
		image-daily|image)
			mtype="image"
			uwhere="uc-dl-daily";;
		image-release)
			mtype="image"
			uwhere="uc-dl";;
	esac
	case "$mtype" in
		maas)
			def_filters=( "${def_filters[@]}" "ftype=root-image.gz" )
			fmt="$maas_fmt";;
		image)
			def_filters=( "${def_filters[@]}" "ftype=disk1.img" )
			fmt="$img_fmt";;
	esac
	fmt="--output-format=$fmt"
	
	local defaults=true
	local tok="" filters="" pt=""
	filters=( )
	pt=( )
    for tok in "$@"; do
		if inargs "$tok" "${RELEASES[@]}"; then
        	tok="release=$tok"
		elif inargs "$tok" "${ARCHES[@]}"; then
			tok="arch=$tok"
		fi
		case "$tok" in
			x) defaults=false;;
			json) fmt="--json";;
			path) fmt="--output-format=%(path)s";;
			url) fmt="--output-format=%(item_url)s";;
			*=*|*~*) filters[${#filters[@]}]="$tok";;
			*) pt[${#pt[@]}]="$tok";;
		esac
	done
	$defaults && filters=( "${def_filters[@]}" "${filters[@]}" )

	cmd=( usquery "--max=1" "$fmt" 
          "$uwhere" "${pt[@]}" "${filters[@]}" )
	debug 1 "${cmd[*]}"
	"${cmd[@]}"
}

main "$@"
# vi: ts=4 noexpandtab
